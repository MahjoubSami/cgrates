diff --git a/cmd/cgr-loader/cgr-loader.go b/cmd/cgr-loader/cgr-loader.go
index 6007105a..c93049d4 100755
--- a/cmd/cgr-loader/cgr-loader.go
+++ b/cmd/cgr-loader/cgr-loader.go
@@ -183,6 +183,8 @@ func main() {
 	if *validate {
 		if !tpReader.IsValid() {
 			return
+		} else {
+			log.Println("Validation ended successfully")
 		}
 	}
 	if *dryRun { // We were just asked to parse the data, not saving it
@@ -271,7 +273,9 @@ func main() {
 			reply := ""
 
 			// Reload cache first since actions could be calling info from within
-			if *verbose {
+			if *flush {
+				log.Print("Flushing cache")
+			} else {
 				log.Print("Reloading cache")
 			}
 			if err = rater.Call("ApierV1.ReloadCache", utils.AttrReloadCache{ArgsCache: utils.ArgsCache{
diff --git a/engine/tp_reader.go b/engine/tp_reader.go
index 5b68c0d7..f5ac99d2 100755
--- a/engine/tp_reader.go
+++ b/engine/tp_reader.go
@@ -2082,6 +2082,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Destinations:")
+	} else {
+		log.Println("Destinations:", len(tpr.destinations))
 	}
 	for _, d := range tpr.destinations {
 		err = tpr.dm.DataDB().SetDestination(d, utils.NonTransactional)
@@ -2097,9 +2099,13 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 		for id, vals := range tpr.revDests {
 			log.Printf("\t %s : %+v", id, vals)
 		}
+	} else {
+		log.Println("Reverse Destinations:", len(tpr.revDests))
 	}
 	if verbose {
 		log.Print("Rating Plans:")
+	} else {
+		log.Println("Rating Plans:", len(tpr.ratingPlans))
 	}
 	for _, rp := range tpr.ratingPlans {
 		err = tpr.dm.SetRatingPlan(rp, utils.NonTransactional)
@@ -2112,6 +2118,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Rating Profiles:")
+	} else {
+		log.Println("Rating Profiles:", len(tpr.ratingProfiles))
 	}
 	for _, rp := range tpr.ratingProfiles {
 		err = tpr.dm.SetRatingProfile(rp, utils.NonTransactional)
@@ -2124,6 +2132,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Action Plans:")
+	} else {
+		log.Println("Action Plans:", len(tpr.actionPlans))
 	}
 	for k, ap := range tpr.actionPlans {
 		for _, at := range ap.ActionTimings {
@@ -2168,9 +2178,13 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 		for id, vals := range tpr.acntActionPlans {
 			log.Printf("\t %s : %+v", id, vals)
 		}
+	} else {
+		log.Println("Account Action Plans:", len(tpr.acntActionPlans))
 	}
 	if verbose {
 		log.Print("Action Triggers:")
+	} else {
+		log.Println("Action Triggers:", len(tpr.actionsTriggers))
 	}
 	for k, atrs := range tpr.actionsTriggers {
 		err = tpr.dm.SetActionTriggers(k, atrs, utils.NonTransactional)
@@ -2183,6 +2197,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Shared Groups:")
+	} else {
+		log.Println("Shared Groups:", len(tpr.sharedGroups))
 	}
 	for k, sg := range tpr.sharedGroups {
 		err = tpr.dm.SetSharedGroup(sg, utils.NonTransactional)
@@ -2195,6 +2211,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("LCR Rules:")
+	} else {
+		log.Println("LCR Rules:", len(tpr.lcrs))
 	}
 	for k, lcr := range tpr.lcrs {
 		err = tpr.dm.SetLCR(lcr, utils.NonTransactional)
@@ -2207,6 +2225,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Actions:")
+	} else {
+		log.Println("Actions:", len(tpr.actions))
 	}
 	for k, as := range tpr.actions {
 		err = tpr.dm.SetActions(k, as, utils.NonTransactional)
@@ -2219,6 +2239,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Account Actions:")
+	} else {
+		log.Println("Account Actions:", len(tpr.accountActions))
 	}
 	for _, ub := range tpr.accountActions {
 		err = tpr.dm.DataDB().SetAccount(ub)
@@ -2231,6 +2253,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Derived Chargers:")
+	} else {
+		log.Println("Derived Chargers:", len(tpr.derivedChargers))
 	}
 	for key, dcs := range tpr.derivedChargers {
 		err = tpr.dm.DataDB().SetDerivedChargers(key, dcs, utils.NonTransactional)
@@ -2243,6 +2267,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("CDR Stats Queues:")
+	} else {
+		log.Println("CDR Stats Queues:", len(tpr.cdrStats))
 	}
 	for _, sq := range tpr.cdrStats {
 		err = tpr.dm.SetCdrStats(sq)
@@ -2255,6 +2281,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Users:")
+	} else {
+		log.Println("Users:", len(tpr.users))
 	}
 	for _, u := range tpr.users {
 		err = tpr.dm.SetUser(u)
@@ -2267,6 +2295,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Aliases:")
+	} else {
+		log.Println("Aliases:", len(tpr.aliases))
 	}
 	for _, al := range tpr.aliases {
 		err = tpr.dm.DataDB().SetAlias(al, utils.NonTransactional)
@@ -2282,9 +2312,13 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 		for id, vals := range tpr.revAliases {
 			log.Printf("\t %s : %+v", id, vals)
 		}
+	} else {
+		log.Println("Reverse Aliases:", len(tpr.revAliases))
 	}
 	if verbose {
 		log.Print("Filters:")
+	} else {
+		log.Println("Filters:", len(tpr.filters))
 	}
 	for _, tpTH := range tpr.filters {
 		th, err := APItoFilter(tpTH, tpr.timezone)
@@ -2300,6 +2334,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("ResourceProfiles:")
+	} else {
+		log.Println("ResourceProfiles:", len(tpr.resProfiles))
 	}
 	for _, tpRsp := range tpr.resProfiles {
 		rsp, err := APItoResource(tpRsp, tpr.timezone)
@@ -2315,6 +2351,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Resources:")
+	} else {
+		log.Println("Resources:", len(tpr.resources))
 	}
 	for _, rTid := range tpr.resources {
 		if err = tpr.dm.SetResource(&Resource{Tenant: rTid.Tenant, ID: rTid.ID, Usages: make(map[string]*ResourceUsage)}); err != nil {
@@ -2326,6 +2364,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("StatQueueProfiles:")
+	} else {
+		log.Println("StatQueueProfiles:", len(tpr.sqProfiles))
 	}
 	for _, tpST := range tpr.sqProfiles {
 		st, err := APItoStats(tpST, tpr.timezone)
@@ -2341,6 +2381,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("StatQueues:")
+	} else {
+		log.Println("StatQueues:", len(tpr.statQueues))
 	}
 	for _, sqTntID := range tpr.statQueues {
 		metrics := make(map[string]StatMetric)
@@ -2363,6 +2405,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("ThresholdProfiles:")
+	} else {
+		log.Println("ThresholdProfiles:", len(tpr.thProfiles))
 	}
 	for _, tpTH := range tpr.thProfiles {
 		th, err := APItoThresholdProfile(tpTH, tpr.timezone)
@@ -2378,6 +2422,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 	}
 	if verbose {
 		log.Print("Thresholds:")
+	} else {
+		log.Println("Thresholds:", len(tpr.thresholds))
 	}
 	for _, thd := range tpr.thresholds {
 		if err = tpr.dm.SetThreshold(&Threshold{Tenant: thd.Tenant, ID: thd.ID}); err != nil {
@@ -2390,6 +2436,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 
 	if verbose {
 		log.Print("SupplierProfiles:")
+	} else {
+		log.Println("SupplierProfiles:", len(tpr.sppProfiles))
 	}
 	for _, tpTH := range tpr.sppProfiles {
 		th, err := APItoSupplierProfile(tpTH, tpr.timezone)
@@ -2406,6 +2454,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 
 	if verbose {
 		log.Print("AttributeProfiles:")
+	} else {
+		log.Println("AttributeProfiles:", len(tpr.attributeProfiles))
 	}
 	for _, tpTH := range tpr.attributeProfiles {
 		th, err := APItoAttributeProfile(tpTH, tpr.timezone)
@@ -2422,6 +2472,8 @@ func (tpr *TpReader) WriteToDatabase(flush, verbose, disable_reverse bool) (err
 
 	if verbose {
 		log.Print("Timings:")
+	} else {
+		log.Println("Timings:", len(tpr.timings))
 	}
 	for _, t := range tpr.timings {
 		if err = tpr.dm.SetTiming(t); err != nil {
