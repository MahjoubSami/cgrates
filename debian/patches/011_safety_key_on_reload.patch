diff --git a/apier/v1/apier.go b/apier/v1/apier.go
index e4febd79..72245a34 100644
--- a/apier/v1/apier.go
+++ b/apier/v1/apier.go
@@ -335,6 +335,7 @@ type AttrLoadTpFromStorDb struct {
 	DryRun   bool // Only simulate, no write
 	Validate bool // Run structural checks
 	Cleanup  bool // Clean up unused rpl_ and rpf_
+	SafetyKey  string // Do nothing unless given key exists in datadb
 }
 
 // Loads complete data in a TP from storDb
@@ -342,6 +343,21 @@ func (self *ApierV1) LoadTariffPlanFromStorDb(attrs AttrLoadTpFromStorDb, reply
 	if len(attrs.TPid) == 0 {
 		return utils.NewErrMandatoryIeMissing("TPid")
 	}
+
+	// Check safety key before proceeding
+	var safetyKeyInitValue string
+	if len(attrs.SafetyKey) > 0 {
+		var err error
+		safetyKeyInitValue, err = self.DataManager.DataDB().GetSafetyKey(attrs.SafetyKey)
+		if err != nil {
+			utils.Logger.Info("Safety key NOT found, quitting")
+			*reply = OK
+			return nil
+		}
+
+		utils.Logger.Info("Safety key found, proceed")
+	}
+
 	dbReader := engine.NewTpReader(self.DataManager.DataDB(), self.StorDb, attrs.TPid, self.Config.DefaultTimezone)
 	if err := dbReader.LoadAll(); err != nil {
 		return utils.NewErrServerError(err)
@@ -413,6 +429,25 @@ func (self *ApierV1) LoadTariffPlanFromStorDb(attrs AttrLoadTpFromStorDb, reply
 			return err
 		}
 	}
+
+	// Delete safety key before leaving unless its value has changed
+	if len(attrs.SafetyKey) > 0 {
+		safetyKeyEndValue, err := self.DataManager.DataDB().GetSafetyKey(attrs.SafetyKey)
+		if err != nil {
+			return errors.New("Safety key NOT found on leaving, weird")
+		}
+
+		if safetyKeyEndValue == safetyKeyInitValue {
+			if err := self.DataManager.DataDB().RemoveKeys([]string{attrs.SafetyKey}); err != nil {
+				return errors.New("Error deleting safety key")
+			}
+
+			utils.Logger.Info("Safety key deleted")
+		} else {
+			utils.Logger.Info("Not deleting safety key as it has changed")
+		}
+	}
+
 	*reply = OK
 	return nil
 }
diff --git a/cmd/cgr-loader/cgr-loader.go b/cmd/cgr-loader/cgr-loader.go
index 9a32fa23..21c5f736 100755
--- a/cmd/cgr-loader/cgr-loader.go
+++ b/cmd/cgr-loader/cgr-loader.go
@@ -69,6 +69,7 @@ var (
 	disable_reverse = flag.Bool("disable_reverse_mappings", false, "Will disable reverse mappings rebuilding")
 	remove          = flag.Bool("remove", false, "Will remove any data from db that matches data files")
 	cleanup         = flag.Bool("cleanup", false, "Remove unreferenced rating plans and rating profiles")
+	safetyKey       = flag.String("safety_key", "", "Do nothing unless given key exists in datadb")
 )
 
 func main() {
@@ -117,6 +118,19 @@ func main() {
 			defer db.Close()
 		}
 	}
+
+	// Check safety key before proceeding
+	var safetyKeyInitValue string
+	if len(*safetyKey) > 0 {
+		safetyKeyInitValue, err = dm.DataDB().GetSafetyKey(*safetyKey)
+		if err != nil {
+			log.Println("Safety key NOT found, quitting")
+			return
+		}
+
+		log.Printf("Safety key found, proceed")
+	}
+
 	// Init necessary db connections, only if not already
 	if !*dryRun { // make sure we do not need db connections on dry run, also not importing into any stordb
 		if *toStorDb { // Import files from a directory into storDb
@@ -336,6 +350,24 @@ func main() {
 
 			}
 		}
+
+		// Delete safety key before leaving unless its value has changed
+		if len(*safetyKey) > 0 {
+			safetyKeyEndValue, err := dm.DataDB().GetSafetyKey(*safetyKey)
+			if err != nil {
+				log.Fatalln("Safety key NOT found on leaving, weird")
+			}
+
+			if safetyKeyEndValue == safetyKeyInitValue {
+				if err := dm.DataDB().RemoveKeys([]string{*safetyKey}); err != nil {
+					log.Fatalln("Error deleting safety key")
+				}
+
+				log.Printf("Safety key %q deleted", *safetyKey)
+			} else {
+				log.Printf("Not deleting safety key as it has changed")
+			}
+		}
 	} else {
 		if err := tpReader.RemoveFromDatabase(*verbose, *disable_reverse); err != nil {
 			log.Fatal("Could not delete from database: ", err)
diff --git a/engine/storage_interface.go b/engine/storage_interface.go
index e05053cd..2ec79f5f 100755
--- a/engine/storage_interface.go
+++ b/engine/storage_interface.go
@@ -103,6 +103,7 @@ type DataDB interface {
 	RemoveUserDrv(string) error
 	SetAlias(*Alias, string) error
 	GetAlias(string, bool, string) (*Alias, error)
+	GetSafetyKey(string) (string, error)
 	RemoveAlias(string, string) error
 	SetReverseAlias(*Alias, string) error
 	GetReverseAlias(string, bool, string) ([]string, error)
diff --git a/engine/storage_map.go b/engine/storage_map.go
index 5e34ec9f..a47b752b 100755
--- a/engine/storage_map.go
+++ b/engine/storage_map.go
@@ -336,6 +336,11 @@ func (ms *MapStorage) RemoveLCRDrv(id, transactionID string) (err error) {
 	return
 }
 
+func (ms *MapStorage) GetSafetyKey(key string) (value string, err error) {
+	err = errors.New("Not implemented yet")
+	return
+}
+
 func (ms *MapStorage) GetDestination(key string, skipCache bool, transactionID string) (dest *Destination, err error) {
 	ms.mu.RLock()
 	defer ms.mu.RUnlock()
diff --git a/engine/storage_mongo_datadb.go b/engine/storage_mongo_datadb.go
index 9a0bcefc..a1c7a144 100755
--- a/engine/storage_mongo_datadb.go
+++ b/engine/storage_mongo_datadb.go
@@ -863,6 +863,11 @@ func (ms *MongoStorage) RemoveLCRDrv(id, transactionID string) (err error) {
 	return err
 }
 
+func (ms *MongoStorage) GetSafetyKey(key string) (value string, err error) {
+	err = errors.New("Not implemented yet")
+	return
+}
+
 func (ms *MongoStorage) GetDestination(key string, skipCache bool, transactionID string) (result *Destination, err error) {
 	cacheKey := utils.DESTINATION_PREFIX + key
 	if !skipCache {
diff --git a/engine/storage_redis.go b/engine/storage_redis.go
index 59776ad0..73cce9d2 100755
--- a/engine/storage_redis.go
+++ b/engine/storage_redis.go
@@ -410,6 +410,19 @@ func (rs *RedisStorage) RemoveLCRDrv(id, transactionID string) (err error) {
 	return err
 }
 
+func (rs *RedisStorage) GetSafetyKey(key string) (value string, err error) {
+	if value, err = rs.Cmd("GET", key).Str(); err != nil {
+		if err == redis.ErrRespNil { // did not find the safety key
+			err = utils.ErrNotFound
+		}
+	}
+	return
+	//if err = rs.ms.Unmarshal(values, &value); err != nil {
+	//	return
+	//}
+	//return
+}
+
 // GetDestination retrieves a destination with id from  tp_db
 func (rs *RedisStorage) GetDestination(key string, skipCache bool, transactionID string) (dest *Destination, err error) {
 	key = utils.DESTINATION_PREFIX + key
