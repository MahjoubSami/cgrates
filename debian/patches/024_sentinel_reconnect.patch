diff --git a/engine/storage_redis.go b/engine/storage_redis.go
index 0a98cb469..d3b334297 100755
--- a/engine/storage_redis.go
+++ b/engine/storage_redis.go
@@ -43,6 +43,9 @@ type RedisStorage struct {
 	loadHistorySize int
 	sentinelClient *sentinel.Client
 	sentinelName   string
+	address        string
+	db             int    //database number used when reconnect sentinel
+	pass           string //password used when reconnect sentinel
 }
 
 func NewRedisStorage(address string, db int, pass, mrshlerStr string, maxConns int, cacheCfg config.CacheConfig, loadHistorySize int, sentinelName string) (*RedisStorage, error) {
@@ -81,7 +84,7 @@ func NewRedisStorage(address string, db int, pass, mrshlerStr string, maxConns i
 		}
 		return &RedisStorage{maxConns: maxConns, ms: mrshler,
 			cacheCfg: cacheCfg, sentinelClient: client,
-			sentinelName: sentinelName}, nil
+			sentinelName: sentinelName, address: address, db: db, pass: pass}, nil
 	} else {
 		p, err := pool.NewCustom("tcp", address, maxConns, df)
 		if err != nil {
@@ -92,13 +95,44 @@ func NewRedisStorage(address string, db int, pass, mrshlerStr string, maxConns i
 	}
 }
 
+func reconnectSentinel(addr, sentinelName string, db int, pass string, maxConns int) (*sentinel.Client, error) {
+	df := func(network, addr string) (*redis.Client, error) {
+		client, err := redis.Dial(network, addr)
+		if err != nil {
+			return nil, err
+		}
+		if len(pass) != 0 {
+			if err = client.Cmd("AUTH", pass).Err; err != nil {
+				client.Close()
+				return nil, err
+			}
+		}
+		if db != 0 {
+			if err = client.Cmd("SELECT", db).Err; err != nil {
+				client.Close()
+				return nil, err
+			}
+		}
+		return client, nil
+	}
+	return sentinel.NewClientCustom("tcp", addr, maxConns, df, sentinelName)
+}
+
 // This CMD function get a connection from the pool.
 // Handles automatic failover in case of network disconnects
 func (rs *RedisStorage) Cmd(cmd string, args ...interface{}) *redis.Resp {
 	if rs.sentinelName != "" {
 		conn, err := rs.sentinelClient.GetMaster(rs.sentinelName)
 		if err != nil {
-			return redis.NewResp(err)
+			fmt.Printf("Reconnect to Sentinel %q (%s) as connection seems dead\n", rs.sentinelName, rs.address)
+			rs.sentinelClient, err = reconnectSentinel(rs.address, rs.sentinelName, rs.db, rs.pass, rs.maxConns)
+			if err != nil {
+				return redis.NewResp(err)
+			}
+			conn, err = rs.sentinelClient.GetMaster(rs.sentinelName)
+			if err != nil {
+				return redis.NewResp(err)
+			}
 		}
 		result := conn.Cmd(cmd, args...)
 		rs.sentinelClient.PutMaster(rs.sentinelName, conn)
